# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Gradle Package

on:
  push:
    branches:
      - master

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      # Set execute permissions for gradlew
    - name: Set execute permissions
      run: chmod +x ./gradlew

    - name: Read package version
      id: get-version
      run: echo "::set-output name=version::$(grep -oP "version\s*=\s*'\K[^']+" build.gradle)
    
    - name: Print package version
      run: echo "Package version is ${{ steps.get-version.outputs.version }}"

    - name: Build with Gradle
      run: ./gradlew build

    # The USERNAME and TOKEN need to correspond to the credentials environment variables used in
    # the publishing section of your build.gradle
    - name: Publish to GitHub Packages
      run: ./gradlew publish
      env:
        USERNAME: ${{ github.actor }}
        TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Git
      run: |
        git config --global user.name "GitHub robot"
        git config --global user.email "robot@github.com"

    - name: Create Git tag
      run: git tag v${{ steps.get-version.outputs.version }}

    - name: Push Git tag
      run: git push origin v${{ steps.get-version.outputs.version }}

    - name: Create GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v1.0.0
        release_name: Release v${{ steps.get-version.outputs.version }}
        body: |
          Release notes for version ${{ steps.get-version.outputs.version }}
          draft: false
          prerelease: false